// Generated by CoffeeScript 1.10.0
(function() {
  var ThrowInsideAsync, getNodeType, isCallbackVar;

  getNodeType = function(node) {
    return node.constructor.name;
  };

  isCallbackVar = function(var_name) {
    var regex;
    regex = /(^(cb|cbb|callback|cb2)$)|(^cb_)|(_cb$)|res/i;
    return regex.test(var_name);
  };

  module.exports = ThrowInsideAsync = (function() {
    function ThrowInsideAsync() {}

    ThrowInsideAsync.prototype.blocks = [];

    ThrowInsideAsync.prototype.rule = {
      name: 'throw_inside_async',
      level: 'error',
      message: 'throw inside of an async. callback(err) instead',
      description: 'Detects a throw inside of an async function.\nThrows should only be in sync functions.\nA func is considered async if it contains a parameter that looks like a callback\'s variable name'
    };

    ThrowInsideAsync.prototype.lintAST = function(node, astApi) {
      this.astApi = astApi;
      this.lintNode(node, astApi);
    };

    ThrowInsideAsync.prototype.lintCall = function(node) {
      node.eachChild((function(_this) {
        return function(child) {
          var err, error_location_data;
          switch (getNodeType(child)) {
            case 'Code':
              error_location_data = _this.hasThrow(node);
              if (error_location_data) {
                err = _this.astApi.createError({
                  lineNumber: error_location_data.first_line + 1,
                  columnNumber: error_location_data.first_column + 1
                });
                _this.errors.push(err);
              }
          }
        };
      })(this));
    };

    ThrowInsideAsync.prototype.lintCode = function(node) {
      var err, error_location_data, is_async;
      is_async = false;
      node.eachChild((function(_this) {
        return function(child) {
          switch (getNodeType(child)) {
            case 'Param':
              if (isCallbackVar(child.name.value)) {
                is_async = true;
              }
          }
        };
      })(this));
      if (is_async) {
        error_location_data = this.hasThrow(node);
        if (error_location_data) {
          err = this.astApi.createError({
            lineNumber: error_location_data.first_line + 1,
            columnNumber: error_location_data.first_column + 1
          });
          this.errors.push(err);
        }
      }
    };

    ThrowInsideAsync.prototype.hasThrow = function(node) {
      var throw_location_data;
      if (getNodeType(node) === 'Throw') {
        return node.locationData;
      }
      throw_location_data = null;
      node.eachChild((function(_this) {
        return function(child) {
          throw_location_data = _this.hasThrow(child);
          if (throw_location_data) {
            return false;
          }
        };
      })(this));
      return throw_location_data;
    };

    ThrowInsideAsync.prototype.lintNode = function(node) {
      var node_name;
      node_name = getNodeType(node);
      switch (node_name) {
        case 'Code':
          this.lintCode(node);
          break;
        case 'Call':
          this.lintCall(node);
      }
      node.eachChild((function(_this) {
        return function(child) {
          return _this.lintNode(child);
        };
      })(this));
    };

    return ThrowInsideAsync;

  })();

}).call(this);

//# sourceMappingURL=index.js.map
